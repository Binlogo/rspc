// TODO: This should come from Rust via Specta
export type OperationType =
  | "query"
  | "mutation"
  | "subscriptionAdd"
  | "subscriptionRemove";

/**
 * The key to an operation
 */
export type ProcedureKey = [string] | [string, /* input */ any];

/**
 * This type represents the Typescript bindings which are generated from the router by Rust.
 */
export type Procedures = {
  queries: { key: ProcedureKey; result: any };
  mutations: { key: ProcedureKey; result: any };
  subscriptions: { key: ProcedureKey; result: any };
};

/**
 * A type which allows inferring the type of the bindings
 */
export type ProcedureLike = {
  _rspc_def: Procedures;
};

/**
 * This is a helper method to infer the type of bindings for this router off other rspc types.
 * The inferred type is what is generated by Rust.
 * @example
 * const rspc = createReactQueryHooks<Operations>();
 * type Bindings = inferBindingsType<typeof rspc>
 */
export type inferBindingsType<TBindings extends Procedures | ProcedureLike> =
  TBindings extends ProcedureLike ? TBindings["_rspc_def"] : TBindings;

// TODO
export type procedureKey<T extends string> = [T] | [T, /* input */ any];

// TODO
export type inferProcedureResult<
  TBindings extends Procedures | ProcedureLike,
  TOperation extends keyof Procedures,
  T extends inferBindingsType<TBindings>[TOperation]["key"][0]
> = Extract<
  inferBindingsType<TBindings>[TOperation],
  { key: procedureKey<T> }
>["result"];

// TODO
export type inferProcedureKey<
  TBindings extends Procedures | ProcedureLike,
  TOperation extends keyof Procedures,
  T extends inferBindingsType<TBindings>[TOperation]["key"][0]
> = Extract<
  inferBindingsType<TBindings>[TOperation],
  { key: procedureKey<T> }
>["key"];

// TODO
export type inferProcedureInput<
  TBindings extends Procedures | ProcedureLike,
  TOperation extends keyof Procedures,
  T extends inferBindingsType<TBindings>[TOperation]["key"][0]
> = inferProcedureKey<TBindings, TOperation, T>[1];

// TODO
export type inferQueryResult<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["queries"]["key"][0]
> = inferProcedureResult<inferBindingsType<TBindings>, "queries", T>;

// TODO
export type inferQueryInput<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["queries"]["key"][0]
> = inferProcedureInput<inferBindingsType<TBindings>, "queries", T>;

// TODO
export type inferMutationResult<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["mutations"]["key"][0]
> = inferProcedureResult<inferBindingsType<TBindings>, "mutations", T>;

// TODO
export type inferMutationInput<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["mutations"]["key"][0]
> = inferProcedureInput<inferBindingsType<TBindings>, "mutations", T>;

// TODO
export type inferSubscriptionResult<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["subscriptions"]["key"][0]
> = inferProcedureResult<inferBindingsType<TBindings>, "subscriptions", T>;

// TODO
export type inferSubscriptionInput<
  TBindings extends Procedures | ProcedureLike,
  T extends inferBindingsType<TBindings>["subscriptions"]["key"][0]
> = inferProcedureInput<inferBindingsType<TBindings>, "subscriptions", T>;

// TODO: Extracting subset of operations by name or some shared key
