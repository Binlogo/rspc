use std::{
    collections::HashMap,
    fs::{self, File},
    io::Write,
    marker::PhantomData,
    path::{Path, PathBuf},
    sync::Arc,
};

use serde_json::Value;

use crate::{ExecError, ExportError, OperationKey, OperationKind, Procedure, StreamOrValue};

pub struct Router<TCtx = (), TMeta = ()>
where
    TCtx: 'static,
{
    pub(crate) queries: HashMap<String, Procedure<TCtx>>,
    pub(crate) mutations: HashMap<String, Procedure<TCtx>>,
    pub(crate) subscriptions: HashMap<String, Procedure<TCtx>>,
    pub(crate) phantom: PhantomData<TMeta>,
}

impl<TCtx, TMeta> Router<TCtx, TMeta>
where
    TCtx: 'static,
{
    pub async fn exec(
        &self,
        ctx: TCtx,
        kind: OperationKind,
        key: OperationKey,
    ) -> Result<StreamOrValue, ExecError> {
        // TODO: This function should return either a stream or a value based on the `OperationKind` not an enum that could be both!
        // TODO: Reduce cloning in this function!
        match kind {
            OperationKind::Query => {
                (self
                    .queries
                    .get(&*key.0)
                    .ok_or(ExecError::OperationNotFound(key.0.clone()))?
                    .exec)(
                    ctx,
                    key.1.clone().unwrap_or(Value::Null),
                    (OperationKind::Query, key),
                )?
                .into_stream_or_value()
                .await
            }
            OperationKind::Mutation => {
                (self
                    .mutations
                    .get(&*key.0)
                    .ok_or(ExecError::OperationNotFound(key.0.clone()))?
                    .exec)(
                    ctx,
                    key.1.clone().unwrap_or(Value::Null),
                    (OperationKind::Mutation, key),
                )?
                .into_stream_or_value()
                .await
            }
            OperationKind::SubscriptionAdd => {
                (self
                    .subscriptions
                    .get(&*key.0)
                    .ok_or(ExecError::OperationNotFound(key.0.clone()))?
                    .exec)(
                    ctx,
                    key.1.clone().unwrap_or(Value::Null),
                    (OperationKind::SubscriptionAdd, key),
                )?
                .into_stream_or_value()
                .await
            }
            OperationKind::SubscriptionRemove => todo!(),
        }
    }

    pub fn arced(self) -> Arc<Self> {
        Arc::new(self)
    }

    pub fn export_ts<TPath: AsRef<Path>>(&self, export_path: TPath) -> Result<(), ExportError> {
        let export_path = PathBuf::from(export_path.as_ref());
        fs::create_dir_all(&export_path)?;
        let mut file = File::create(export_path.clone().join("index.ts"))?;
        writeln!(file, "// This file was generated by [rspc](https://github.com/oscartbeaumont/rspc). Do not edit this file manually.")?;

        // for (key, op) in self.queries.iter() {
        //     // println!("{:?}", to_ts_export(op.ty.arg_ty.clone()));
        //     // println!("{:?}", to_ts_definition(&op.ty.result_ty.body));
        // }

        // TODO: Convert this function over to specta!

        Ok(())
    }
}
